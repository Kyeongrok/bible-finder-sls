org: oceanfog1
app: bible-finder-backend-app
# For full config options, check the docs:
#    docs.serverless.com

service: bible-finder-backend # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: ap-northeast-1


# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  findSingle:
    handler: handler.find_single_fr_db
    events:
      - http:
          path: v1/find/single/{addr}
          method: get
          cors: true
          request:
            parameters:
              paths:
                addr: true

  findSingleXml:
    handler: handler.findSingleXml
    events:
      - http:
          path: v1/find/single/xml/{addr}
          method: get
          cors: true
          request:
            parameters:
              paths:
                addr: true
  findBetween:
    handler: handler.findBetween
    events:
      - http:
          path: v1/find/between
          method: get
          cors: true

  findAdmCode:
    handler: handler.find_admcd
    events:
      - http:
          path: v1/find/admcd/{code}
          method: get
          cors: true
          request:
            parameters:
              paths:
                addr: true

  findBetweenXml:
    handler: handler.findBetweenXml
    events:
      - http:
          path: v1/find/between/xml
          method: get
          cors: true

  findChapter:
    handler: handler.getChapter
    events:
      - http:
          path: v1/find/chapter
          method: get
          cors: true

  findElection21:
    handler: handler.findElection21Full
    events:
      - http:
          path: v1/find/election21/full
          method: get
          cors: true
          request:
            template:
              application/json: '{ "foo" : "$input.params(''bar'')" }'
#      - schedule: rate(10 minutes)

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/Book"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/Book"